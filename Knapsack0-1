package DP;

public class Knapsack01 {
   static void knap(int w[],int val[],int c)
   {
       int a[][]=new int[w.length+1][c+1];
       for(int i=0;i<w.length+1;i++)
       {
           for(int j=0;j<c+1;j++)
           {
               if(i==0||j==0)
               {
                   a[i][j]=0;
               }
               else if(j>=w[i-1])
               {
                   int k2 = 0;
                   int k1 = a[i - 1][j];
                   k2 = val[i - 1] + a[i-1][j - (w[i - 1])];
                   int max = Math.max(k1, k2);
                   a[i][j] = max;
               }
               else
               {
                   a[i][j]= a[i - 1][j];
               }

           }
       }
       System.out.println(a[w.length][c]);
       print(a,w.length+1,c+1,w);
   }
   static void print(int a[][],int n,int m,int w[])
   {
      int i=n-1;int j=m-1;
       while(a[i][j]!=0)
       {
           if(a[i][j]==a[i-1][j])
           {
              i--;
           }
           else
           {
               System.out.println(w[i-1]);
               j=j-w[i-1];
               i--;

           }
       }
   }
   public static void main(String args[])
    {
       int v[]={20,30,10,50};
       int w[]={1,3,4,6};
      int cap=10;
      knap(w,v,10);

    }
}
